{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_ref","markdown","data","file","childMarkdownRemark","a","createElement","title","style","maxWidth","marginLeft","marginRight","dangerouslySetInnerHTML","__html","html","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","React","createContext","ListLink","props","react_default","display","gatsby_browser_entry","to","activeStyle","color","textDecoration","margin","children","Header","siteTitle","marginBottom","textAlign","padding","listStyle","header_ListLink","defaultProps","Layout","_856328897","Fragment","header","site","siteMetadata","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"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","file":"component---src-pages-about-js-8e4caa21db9f5558d2fb.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default ({ data }) => {\n  const markdown = data.file.childMarkdownRemark\n    return (\n        <Layout>\n          <SEO title=\"About Kyle Genoe\" />\n          <div \n          style={{\n            maxWidth: 400,\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}>\n              <div dangerouslySetInnerHTML={{ __html: markdown.html }}/>\n          </div>\n        </Layout>\n    )\n}\n\nexport const query= graphql`\n  {\n    file(base: {eq: \"about.md\"}) {\n      childMarkdownRemark {\n        html\n      }\n    }\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst ListLink = props => (\n    <li style={{ display: `inline-block`, marginRight: `1rem`}}>\n      <Link \n          to={props.to}\n          activeStyle={{ color: `black` }}\n          style={{ \n            textDecoration: `none`,\n            color: `darkGray`,\n            margin: `0 0.5rem 0 0`,\n          }}\n        >{props.children}</Link>\n    </li>\n)\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        textAlign: `center`,\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `2.5rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n    <div style={{textAlign: `center`}}>\n      <ul style={{listStyle: `none`}}>\n        <ListLink to=\"/about/\">ABOUT</ListLink>\n        <ListLink to=\"/projects/\">PROJECTS</ListLink>\n        <ListLink to=\"/contact/\">CONTACT</ListLink>\n      </ul>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          maxWidth: 950,\n          margin: `auto`,\n          padding: `3em`\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}