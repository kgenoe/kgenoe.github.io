{"version":3,"sources":["webpack:///./src/components/podcast-item.js","webpack:///./src/pages/this-weeks-podcasts.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["PodcastItem","props","react_default","a","createElement","episode","show","releasedate","__webpack_require__","d","__webpack_exports__","query","_ref","data","layout","seo","title","href","target","sunday","Date","setDate","getDate","getDay","lastSunday","daySorted","allGoogleSheetSheet1Row","edges","reverse","forEach","_ref2","node","date","listeneddate","day","push","sundayItems","shift","i","views","days","length","dateString","item","podcast_item","rating","itemsFromData","monthIndex","getMonth","year","getFullYear","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","React","createContext","ListLink","style","display","marginRight","gatsby_browser_entry","to","activeStyle","color","textDecoration","margin","children","Header","siteTitle","marginBottom","textAlign","maxWidth","padding","listStyle","header_ListLink","defaultProps","Layout","_856328897","Fragment","header","site","siteMetadata","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"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","file":"component---src-pages-this-weeks-podcasts-js-e8ea6519aa3f35f99b46.js","sourcesContent":["import React from \"react\"\n\nconst PodcastItem = props => {\n    return (\n        <div>\n            <b>{props.episode}</b> - <i>{props.show}</i><br/>\n            Published {props.releasedate}<br/>\n            <br/>\n        </div>\n    )\n};\n\nexport default PodcastItem;","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PodcastItem from \"../components/podcast-item\"\nimport { SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS } from \"constants\";\n\nexport default ({ data }) => {\n    return (\n        <Layout>\n            <SEO title=\"This Week's Podcasts\" />\n            <h3>This Week's Podcasts</h3>\n            This is a roundup of all the podcasts I've listened to in the past week.\n            The list is automatically generated every Sunday for the previous week.\n            A spreadsheet of my full podcast listening history can be viewed <a \n            href=\"https://docs.google.com/spreadsheets/d/1ydv8bwYzAyNYQKklA7fqgxfrjxZdB0s2yboLNqTqA-s/edit?usp=sharing\" target=\"_blank\">\n            here</a>. Feel free to give me recommendations or feedback on <a href=\"https://twitter.com/KyleGenoe\" target=\"_blank\">\n            twitter</a>.\n            <br/><br/>\n            This list was inspired by Wil Williams' \"This Week in Podcast\" series.\n            If you want to read smart things about podcasts, you should check out her work <a href=\"https://wilwilliams.reviews\" target=\"_blank\">\n            here</a>.\n\n            <br/>\n            <br/>\n            <br/>\n\n\n            {itemsFromData(data)}\n        </Layout>\n    )\n}\n\nexport const query= graphql`\n    {\n        allGoogleSheetSheet1Row(limit: 500) {\n            edges {\n                node {\n                    show\n                    episode\n                    releasedate\n                    listeneddate\n                }\n            }\n        }\n    }\n`\n\n\nfunction itemsFromData(data) {\n\n    // get most recent sunday, and sunday before it\n    var sunday = new Date();\n    sunday.setDate(sunday.getDate() - sunday.getDay());\n    var lastSunday = new Date();\n    lastSunday.setDate(sunday.getDate() - 7);\n\n    // group records based on the day they were listened\n    // 0 = sunday, 1 = monday, etc.\n    var daySorted = [[], [], [], [], [], [], []];\n\n    // reverse data so that first listened show up at top of days\n    var rows = data.allGoogleSheetSheet1Row.edges.reverse()\n    rows.forEach(( { node }) => {\n\n        // only include dates in the last week\n        var date = new Date(node.listeneddate) \n        if(lastSunday < date && date < sunday) {\n            var day = date.getDay()\n            daySorted[day].push(node)\n        }\n    });\n\n    // move sunday to the end of the week\n    let sundayItems = daySorted.shift()\n    daySorted.push(sundayItems)\n\n    // the views that will makeup the html body\n    var views = [];\n\n    var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    var i;\n    for (i = 0; i < daySorted.length; i++) { \n        \n        // only add days where episodes have been listened to\n        if(daySorted[i].length == 0) {\n            continue\n        }\n       \n        // add day/date header from the `days` array \n        var date = new Date(daySorted[i][0].listeneddate)\n        views.push(<h3>{days[i]} - {dateString(date)}</h3>)\n\n        // add a podcast item for each podcast for the ith day\n        daySorted[i].forEach(( item ) => {\n            views.push(\n                <PodcastItem \n                    show={item.show}\n                    episode={item.episode}\n                    rating={item.rating}\n                    releasedate={item.releasedate}\n                    listeneddate={item.listeneddate}\n                />\n            );\n        });\n\n        views.push(<br/>)\n    }\n\n    return views;\n  }\n\n\nfunction dateString(date) {\n    var monthNames = [\n        \"January\", \"February\", \"March\",\n        \"April\", \"May\", \"June\", \"July\",\n        \"August\", \"September\", \"October\",\n        \"November\", \"December\"\n      ];\n\n    var day = date.getDate();\n    var monthIndex = date.getMonth();\n    var year = date.getFullYear();\n\n    return day + ' ' + monthNames[monthIndex] + ' ' + year;\n}","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst ListLink = props => (\n    <li style={{ display: `inline-block`, marginRight: `1rem`}}>\n      <Link \n          to={props.to}\n          activeStyle={{ color: `black` }}\n          style={{ \n            textDecoration: `none`,\n            color: `darkGray`,\n            margin: `0 0.5rem 0 0`,\n          }}\n        >{props.children}</Link>\n    </li>\n)\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        textAlign: `center`,\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `2.5rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n    <div style={{textAlign: `center`}}>\n      <ul style={{listStyle: `none`}}>\n        <ListLink to=\"/about/\">ABOUT</ListLink>\n        <ListLink to=\"/projects/\">PROJECTS</ListLink>\n        <ListLink to=\"/contact/\">CONTACT</ListLink>\n      </ul>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          maxWidth: 950,\n          margin: `auto`,\n          padding: `3em`\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}